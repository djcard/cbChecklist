{"version":3,"file":"static/js/1312.c2fc1eee.chunk.js","mappings":"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","sources":["actions/uiActions.js","containers/foundation/tests/FoundationFunctionsTest.js","containers/testing/testingFunctions.js"],"sourcesContent":["\r\n//Control Blocks\r\nexport const addToControlBlock = (status) =>{\r\n    return {\r\n        type:\"ADD_TO_CONTROL_BLOCK\",\r\n        payload:status\r\n    }\r\n};\r\n\r\nexport const removeFromControlBlock = (status) =>{\r\n    return {\r\n        type:\"REMOVE_FROM_CONTROL_BLOCK\",\r\n        payload:status\r\n    }\r\n};\r\n\r\n//Tabs\r\nexport const addTabGroup = (tabGroupData)=>{\r\n    return {\r\n        type:\"ADD_TAB_GROUP\",\r\n        payload:tabGroupData\r\n    }\r\n};\r\n\r\nexport const removeTabGroup = (tabGroupName)=>{\r\n    return {\r\n        type:\"REMOVE_TAB_GROUP\",\r\n        payload:tabGroupName\r\n    }\r\n};\r\n\r\nexport const addTabToGroup = (tabData) => {\r\n    return {\r\n        type:\"ADD_TAB_TO_GROUP\",\r\n        payload:tabData\r\n    }\r\n};\r\n\r\nexport const removeTabFromGroup = (groupName,keyName) => {\r\n    return {\r\n        type:\"REMOVE_TAB_FROM_GROUP\",\r\n        payload: {groupName:groupName,keyName:keyName}\r\n    }\r\n};\r\n\r\nexport const toggleTab = (groupName,key) => {\r\n    return {\r\n        type:\"TOGGLE_TAB\",\r\n        payload:{groupName:groupName,key:key}\r\n    }\r\n};\r\n\r\nexport const addTabPanelGroup = (groupName) =>{\r\n    return {\r\n        type:\"ADD_TAB_PANEL_GROUP\",\r\n        payload:groupName\r\n    }\r\n}\r\n\r\nexport const addControlSet = (controls) => {\r\n    return {\r\n        type:\"ADD_CONTROLS\",\r\n        payload:controls\r\n    }\r\n};","import React,{useEffect} from 'react';\r\nimport * as allFoundation from 'src/containers/foundation/foundationFunctions'\r\nimport store from 'src/store';\r\nimport {updateTesting} from \"src/actions/testingActions\";\r\nimport {\r\n    checkStatus,\r\n    cleanNewState,\r\n    createConnectionTimer,\r\n    failConnection,\r\n    processConnection,\r\n    removeAllChildren,\r\n    returnHeightOf,\r\n    returnBoundingRectOf,\r\n    returnWidthOf,\r\n    goHome,\r\n    obtainBlurb,\r\n    processContent,\r\n    failContent, obtainTabGroup, renderPanels, defaultStyle, loadConnectionConsts\r\n} from \"src/containers/foundation/foundationFunctions\";\r\nimport {functionRun} from \"../../testing/testingFunctions\";\r\nimport {updateAppSettings} from \"../../../actions/foundationActions\";\r\nimport {addTabGroup} from \"src/actions/uiActions\";\r\n\r\nconst fakeResult = \"dzsfhnxgfnxgfnd\";\r\n\r\nconst checkStatusFunc = (...args) => {\r\n    functionRun(\"checkStatus\");\r\n}\r\n\r\nconst checkConnectionFunc = (...args) => {\r\n    functionRun(\"checkConnection\");\r\n}\r\n\r\nconst cleanState = {\r\n    dataStore:\"HELLO!!!\",\r\n    simplewebrtc:[\"dfhnksjhnf\"],\r\n    remain:\"zkdfjghdgfsjhdfs\"\r\n}\r\n\r\nconst divDims = {\r\n    height:100,\r\n    marginTop:5,\r\n    marginBottom:15,\r\n    borderTopWidth:3,\r\n    borderBottomWidth:4,\r\n    paddingBottom:10,\r\n    paddingTop:12,\r\n    width:657\r\n}\r\n\r\nconst fakeMod=\"khjfghfghgfh\";\r\nconst fakeMod2=\"kjdksfjfkgj\";\r\n\r\nconst makeAppTopModFunc = (...args) => {\r\n    functionRun(\"makeAppTop\");\r\n    store.dispatch(updateTesting({appTop:args}));\r\n}\r\n\r\nconst showSpinnerFunc = (...args) => {\r\n    functionRun(\"showSpinner\");\r\n}\r\n\r\nconst hideSpinnerFunc = (...args) => {\r\n    functionRun(\"hideSpinner\");\r\n}\r\n\r\nconst obtainContentFunc = (...args) => {\r\n    functionRun(\"obtainContent\");\r\n    store.dispatch(updateTesting({obtainContent:args}))\r\n}\r\nconst processContentFunc = (...args) => {\r\n    functionRun(\"processContent\");\r\n}\r\n\r\nconst failContentFunc = (...args) => {\r\n    functionRun(\"failContent\");\r\n}\r\n\r\nconst processKey=\"oADUSGHASJV\";\r\nconst tabGroupNameTest = \"OHJOLHLH\"\r\n/*\r\nconst preloadBlurbs = [\r\n    {slug:\"\",key:\"\"},\r\n    {slug:\"\",key:\"\"}\r\n]*/\r\n\r\nconst panelData=[\r\n    {groupName:\"first\",key:\"first\"},\r\n    {groupName:\"second\",key:\"second\"},\r\n    {groupName:\"third\",key:\"third\"}\r\n];\r\n\r\n\r\nconst FoundationFunctionsTest = () => {\r\n    useEffect(()=>{\r\n        store.dispatch(addTabGroup({groupName:tabGroupNameTest}));\r\n        store.dispatch(updateTesting({\r\n            totalFoundationNum:Object.keys(allFoundation).length,\r\n            tabGroupNameTest:tabGroupNameTest,\r\n            fakeResult:fakeResult,\r\n            fakeMod:fakeMod,\r\n            fakeMod2:fakeMod2,\r\n            checkResult:createConnectionTimer(checkStatusFunc),\r\n            checkConnection:checkStatus(2000,checkConnectionFunc ),\r\n            cleanState:cleanNewState(cleanState),\r\n            divDim:divDims,\r\n            returnHeightOf:returnHeightOf(\"testDiv\"),\r\n            returnBoundingRectOf:returnBoundingRectOf(\"testDiv\"),\r\n            returnWidthOf:returnWidthOf(\"testDiv\"),\r\n            obtainBlurb:obtainBlurb(fakeResult,fakeMod,showSpinnerFunc,obtainContentFunc,processContentFunc,failContentFunc),\r\n            processContent:processContent(processKey,{data:fakeMod},hideSpinnerFunc),\r\n            didObtain:obtainTabGroup(tabGroupNameTest),\r\n            panels:renderPanels(panelData,{},100),\r\n            panelData:panelData,\r\n            connection:loadConnectionConsts(),\r\n            defaultStyle:defaultStyle\r\n        }));\r\n//                <button onClick={()=>store.dispatch(updateUser({isLoggedIn:true}))} id={\"login\"}>Login</button>\r\n        store.dispatch(updateAppSettings({defaultModule:fakeMod,defaultLoggedInModule:fakeMod2,goHomeModuleName:fakeMod}))\r\n    },[]);\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button onClick={()=>removeAllChildren(\"dots2\")} id={\"remDots\"}>Remove Dots</button>\r\n                <button onClick={()=>failConnection()} id=\"failConnection\">Fail Test</button>\r\n                <button onClick={()=>processConnection({data:{statusCode:200,data:fakeResult}})} id=\"passConnection\">Pass Test</button>\r\n\r\n\r\n                <button onClick={()=>goHome(makeAppTopModFunc)} id={\"goHome\"}>goHome</button>\r\n\r\n                <button onClick={()=>failContent(null,null,hideSpinnerFunc())} id={\"failContent\"}>fail Content</button>\r\n            </div>\r\n            <div id=\"dots2\">\r\n                <div className=\"tobeDeleted\" >1</div>\r\n                <div className=\"tobeDeleted\" >2</div>\r\n                <div className=\"tobeDeleted\" >3</div>\r\n                <div className=\"tobeDeleted\" >4</div>\r\n                <div className=\"tobeDeleted\" >5</div>\r\n            </div>\r\n            <div id=\"testDiv\" style={{height:divDims.height,\r\n                marginTop:divDims.marginTop,\r\n                marginBottom:divDims.marginBottom,\r\n                borderTopWidth:divDims.borderTopWidth,\r\n                borderBottomWidth:divDims.borderBottomWidth,\r\n                paddingBottom:divDims.paddingBottom,\r\n                paddingTop:divDims.paddingTop,\r\n                width:divDims.width,\r\n                backgroundColor:\"red\",\r\n                borderTopColor:\"black\",\r\n                borderTopStyle:\"dashed\",\r\n                borderBottomColor:\"blue\",\r\n                borderBottomStyle:\"dotted\"\r\n            }}>TestDiv</div>\r\n        </div>\r\n    )\r\n};\r\n//<button onClick={()=>store.dispatch(updateTesting({appMod:obtainWelcomeMod()}))} id={\"establishAppMod2\"}>establishAppModaRand</button>\r\n//<button onClick={()=>store.dispatch(updateTesting({appMod:obtainWelcomeMod(fakeResult)}))} id={\"establishAppModRand\"}>establishAppModaRand</button>\r\nexport default FoundationFunctionsTest;\r\n","import store from \"src/store\";\r\nimport {updateTesting} from \"src/actions/testingActions\";\r\n\r\nexport const functionRun = (name)=>{\r\n    let allCounts = store.getState().testing?.counts ? store.getState().testing.counts : {};\r\n    let count = allCounts.hasOwnProperty(name) ? allCounts[name] : 0;\r\n    allCounts[name]=count+1;\r\n    store.dispatch(updateTesting({counts:allCounts}));\r\n};\r\n"],"names":["addToControlBlock","status","type","payload","removeFromControlBlock","addTabGroup","tabGroupData","removeTabGroup","tabGroupName","addTabToGroup","tabData","removeTabFromGroup","groupName","keyName","toggleTab","key","addTabPanelGroup","addControlSet","controls","fakeResult","checkStatusFunc","functionRun","checkConnectionFunc","cleanState","dataStore","simplewebrtc","remain","divDims","height","marginTop","marginBottom","borderTopWidth","borderBottomWidth","paddingBottom","paddingTop","width","fakeMod","fakeMod2","makeAppTopModFunc","_len","arguments","length","args","Array","_key","store","dispatch","updateTesting","appTop","showSpinnerFunc","hideSpinnerFunc","obtainContentFunc","_len2","_key2","obtainContent","processContentFunc","failContentFunc","tabGroupNameTest","panelData","useEffect","totalFoundationNum","Object","keys","allFoundation","checkResult","createConnectionTimer","checkConnection","checkStatus","cleanNewState","divDim","returnHeightOf","returnBoundingRectOf","returnWidthOf","obtainBlurb","processContent","data","didObtain","obtainTabGroup","panels","renderPanels","connection","loadConnectionConsts","defaultStyle","updateAppSettings","defaultModule","defaultLoggedInModule","goHomeModuleName","_jsxs","children","_jsx","onClick","removeAllChildren","id","failConnection","processConnection","statusCode","goHome","failContent","className","style","backgroundColor","borderTopColor","borderTopStyle","borderBottomColor","borderBottomStyle","name","_store$getState$testi","allCounts","getState","testing","counts","count","hasOwnProperty"],"sourceRoot":""}