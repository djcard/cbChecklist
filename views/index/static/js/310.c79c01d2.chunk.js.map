{"version":3,"file":"static/js/310.c79c01d2.chunk.js","mappings":"oLAyCA,WAAeA,EAAAA,EAAAA,KARS,SAACC,GACrB,MAAO,CACHC,QAASD,EAAMC,QACfC,YAAaF,EAAME,YACnBF,MAAOA,EAEf,GAEwC,CACpCG,cAAAA,EAAAA,eADJ,EAxBmB,SAACC,GACGA,EAAMH,QAAQI,oBAZrC,SAAqBC,GACjB,IAAMC,GAAMC,EAAAA,EAAAA,UAIZ,OAHAC,EAAAA,EAAAA,YAAU,WACNF,EAAIG,QAAUJ,CAClB,IACOC,EAAIG,OACf,CAOuBC,CAAYP,EAAMH,QAAQI,qBAIzCO,EAAAA,EAAAA,YAAWR,EAAMH,QAAQI,mBAAkB,SAACQ,GAAM,OAAGT,EAAMD,cAAc,CAACW,cAAeD,EAAOE,SAAS,IAE7G,IAAIC,EAAWZ,EAAMH,QAAQa,eAAgBG,EAAAA,EAAAA,KAACb,EAAMH,QAAQa,cAAa,CAACI,OAAQd,EAAMc,OAASd,EAAMc,OAAS,SAAY,KAC5H,OAAOC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACHH,EAAAA,EAAAA,KAAA,SAAOI,KAAK,OAAOC,SAAU,SAACC,GAAG,OAAKnB,EAAMD,cAAc,CAACE,kBAAmBkB,EAAIC,OAAOlB,OAAO,IAC/FU,GACAS,EAAAA,EAAAA,cAAarB,KAEtB,G","sources":["components/Testing/RandomLoad.js"],"sourcesContent":["import React, {useEffect, useRef} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {updateTesting} from \"../../actions/testingActions\";\r\nimport {loadNewMod} from \"../../utilities/utilityFunctions\";\r\nimport {showTestData} from \"src/containers/foundation/foundationFunctions\";\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n\r\n\r\n\r\n\r\nconst RandomLoad = (props) => {\r\n    let currRandLoad = props.testing.randomLoadModName;\r\n    let prevRandLoad = usePrevious(props.testing.randomLoadModName);\r\n\r\n\r\n    if (currRandLoad !== prevRandLoad) {\r\n        loadNewMod(props.testing.randomLoadModName,(module)=>props.updateTesting({randomLoadMod: module.default}));\r\n    }\r\n    let randLoad = props.testing.randomLoadMod ? <props.testing.randomLoadMod height={props.height ? props.height : \"100%\"}/> : null;\r\n    return <div>\r\n        <input type=\"text\" onChange={(evt) => props.updateTesting({randomLoadModName: evt.target.value})}/>\r\n        {randLoad}\r\n        {showTestData(props)}\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        testing: state.testing,\r\n        appSettings: state.appSettings,\r\n        state: state\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    updateTesting\r\n})(RandomLoad);\r\n"],"names":["connect","state","testing","appSettings","updateTesting","props","randomLoadModName","value","ref","useRef","useEffect","current","usePrevious","loadNewMod","module","randomLoadMod","default","randLoad","_jsx","height","_jsxs","children","type","onChange","evt","target","showTestData"],"sourceRoot":""}